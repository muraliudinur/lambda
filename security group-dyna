Step 1: Define Variables (variables.tf)
Define a list of security group rules in Terraform:

hcl
Copy
Edit
variable "security_group_rules" {
  description = "List of security group rules"
  type        = list(object({
    type        = string  # "ingress" or "egress"
    from_port   = number
    to_port     = number
    protocol    = string
    cidr_blocks = list(string)
  }))

  default = [
    { type = "ingress", from_port = 22, to_port = 22, protocol = "tcp", cidr_blocks = ["0.0.0.0/0"] },  # SSH
    { type = "ingress", from_port = 80, to_port = 80, protocol = "tcp", cidr_blocks = ["0.0.0.0/0"] },  # HTTP
    { type = "ingress", from_port = 443, to_port = 443, protocol = "tcp", cidr_blocks = ["0.0.0.0/0"] },  # HTTPS
    { type = "egress", from_port = 0, to_port = 0, protocol = "-1", cidr_blocks = ["0.0.0.0/0"] }  # Allow all egress
  ]
}
ðŸ”¹ Each rule is defined as an object with properties (from_port, to_port, etc.).
ðŸ”¹ Easily add/remove rules in default.

ðŸ”¹ Step 2: Create a Security Group (main.tf)
hcl
Copy
Edit
resource "aws_security_group" "example_sg" {
  name        = "example-sg"
  description = "Security group with dynamic rules"
  vpc_id      = "vpc-xxxxxxxx"  # Replace with your VPC ID
}
ðŸ”¹ Defines the Security Group (SG) without hardcoding rules.

ðŸ”¹ Step 3: Add Rules Dynamically Using for_each
hcl
Copy
Edit
resource "aws_security_group_rule" "sg_rules" {
  for_each = { for rule in var.security_group_rules : "${rule.type}-${rule.from_port}-${rule.to_port}" => rule }

  security_group_id = aws_security_group.example_sg.id
  type             = each.value.type
  from_port        = each.value.from_port
  to_port          = each.value.to_port
  protocol         = each.value.protocol
  cidr_blocks      = each.value.cidr_blocks
}
