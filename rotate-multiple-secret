Rotating multiple AWS Secrets Manager secrets using a Lambda function can be automated with Terraform. The rotation Lambda function can be written to handle the rotation logic, and Terraform can be used to create and manage the resources. Here is a step-by-step guide to achieve this.

Step-by-Step Guide
1. Write the Lambda Function
Create a Lambda function that rotates the secrets. For simplicity, this example rotates database credentials.

rotate_secrets.py:

python
Copy code
import boto3
import json
import os
from botocore.exceptions import ClientError

secretsmanager = boto3.client('secretsmanager')

def lambda_handler(event, context):
    arn = event['SecretId']
    token = event['ClientRequestToken']
    step = event['Step']
    
    # Retrieve the metadata of the secret
    metadata = secretsmanager.describe_secret(SecretId=arn)
    
    # Check if the secret is already marked for deletion
    if 'DeletedDate' in metadata:
        raise ValueError("Cannot rotate secret marked for deletion")
    
    # Check if the version is in the pending stage
    versions = metadata['VersionIdsToStages']
    if token not in versions:
        raise ValueError(f"Secret version {token} not found")
    if "AWSCURRENT" in versions[token]:
        return
    elif "AWSPENDING" not in versions[token]:
        raise ValueError(f"Secret version {token} is not set as AWSPENDING")
    
    if step == "createSecret":
        create_secret(arn, token)
    elif step == "setSecret":
        set_secret(arn, token)
    elif step == "testSecret":
        test_secret(arn, token)
    elif step == "finishSecret":
        finish_secret(arn, token)
    else:
        raise ValueError("Invalid step")

def create_secret(arn, token):
    # Generate a new secret value
    new_secret_value = json.dumps({
        'username': 'new_user',
        'password': 'new_password'
    })
    secretsmanager.put_secret_value(
        SecretId=arn,
        ClientRequestToken=token,
        SecretString=new_secret_value,
        VersionStages=['AWSPENDING']
    )

def set_secret(arn, token):
    # Set the new secret in the service (e.g., update database credentials)
    pass  # Implement service-specific logic

def test_secret(arn, token):
    # Test the new secret (e.g., connect to the database with the new credentials)
    pass  # Implement service-specific logic

def finish_secret(arn, token):
    metadata = secretsmanager.describe_secret(SecretId=arn)
    current_version = None
    for version, stages in metadata['VersionIdsToStages'].items():
        if 'AWSCURRENT' in stages:
            current_version = version
            break

    secretsmanager.update_secret_version_stage(
        SecretId=arn,
        VersionStage='AWSCURRENT',
        MoveToVersionId=token,
        RemoveFromVersionId=current_version
    )
2. Create Terraform Configuration
Create a Terraform configuration to set up the Lambda function, IAM roles, and Secrets Manager resources.

main.tf:

hcl
Copy code
provider "aws" {
  region = "us-west-2"
}

resource "aws_iam_role" "lambda_rotation_role" {
  name = "lambda_rotation_role"
  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [{
      Action = "sts:AssumeRole",
      Effect = "Allow",
      Principal = {
        Service = "lambda.amazonaws.com"
      }
    }]
  })
}

resource "aws_iam_role_policy" "lambda_rotation_policy" {
  name = "lambda_rotation_policy"
  role = aws_iam_role.lambda_rotation_role.id
  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Action = [
          "secretsmanager:GetSecretValue",
          "secretsmanager:DescribeSecret",
          "secretsmanager:PutSecretValue",
          "secretsmanager:UpdateSecretVersionStage"
        ],
        Effect = "Allow",
        Resource = "*"
      },
      {
        Action = [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
        ],
        Effect = "Allow",
        Resource = "*"
      }
    ]
  })
}

resource "aws_lambda_function" "rotate_secrets_function" {
  filename         = "rotate_secrets.zip"
  function_name    = "rotate_secrets_function"
  role             = aws_iam_role.lambda_rotation_role.arn
  handler          = "rotate_secrets.lambda_handler"
  runtime          = "python3.8"
  source_code_hash = filebase64sha256("rotate_secrets.zip")

  environment {
    variables = {
      EXAMPLE_ENV = "example_value"
    }
  }
}

resource "aws_secretsmanager_secret" "example_secret" {
  name                    = "example_secret"
  description             = "This is an example secret"
  rotation_lambda_arn     = aws_lambda_function.rotate_secrets_function.arn
  rotation_rules {
    automatically_after_days = 30
  }
}

output "secret_arn" {
  value = aws_secretsmanager_secret.example_secret.arn
}
3. Prepare the Lambda Deployment Package
Zip the Lambda function code and any dependencies:

bash
Copy code
pip install boto3 -t ./package
cp rotate_secrets.py package/
cd package
zip -r ../rotate_secrets.zip .
cd ..
4. Initialize Terraform
Initialize your Terraform working directory:

bash
Copy code
terraform init
5. Apply the Configuration
Apply the Terraform configuration:

bash
Copy code
terraform apply
Explanation
Lambda Function: The rotate_secrets.py file contains the logic for rotating secrets. It handles different steps such as creating, setting, testing, and finishing the secret rotation.
Terraform Configuration: The Terraform configuration creates the necessary IAM role and policy for the Lambda function, deploys the Lambda function, and sets up the Secrets Manager secret with rotation enabled.
IAM Role and Policies: The IAM role and policies ensure the Lambda function has the necessary permissions to interact with Secrets Manager and CloudWatch Logs.
Secrets Manager Secret: The secret is configured to rotate automatically every 30 days using the specified Lambda function.
This setup ensures that your secrets are rotated automatically and securely, minimizing the risk of credential exposure. Adjust the code and configuration to fit your specific use case and environment.
