Prerequisites
HashiCorp Vault API Endpoint: Ensure Vault is accessible from Lambda.
Vault Token: Stored securely in Lambda environment variables or retrieved dynamically.
Vault Path for Secrets:
Master Credentials Path: /secret/db/master
Rotated User Path: /secret/db/rotated-user
Lambda Function
python
Copy
Edit
import json
import os
import requests
import psycopg2
import random
import string

# Environment Variables (Set these in Lambda)
VAULT_ADDR = os.environ['VAULT_ADDR']  # Vault API URL (e.g., http://vault.example.com:8200)
VAULT_TOKEN = os.environ['VAULT_TOKEN']  # Vault Access Token (Consider using Vault Agent)
MASTER_SECRET_PATH = os.environ['MASTER_SECRET_PATH']  # e.g., "secret/db/master"
ROTATED_SECRET_PATH = os.environ['ROTATED_SECRET_PATH']  # e.g., "secret/db/rotated-user"
DB_USER = os.environ['DB_USER']  # RDS user whose password is being rotated
DB_HOST = os.environ['DB_HOST']  # RDS endpoint
DB_NAME = os.environ['DB_NAME']  # Database name
DB_PORT = os.environ.get('DB_PORT', '5432')  # Default PostgreSQL port

# Vault Headers
HEADERS = {"X-Vault-Token": VAULT_TOKEN}

def get_vault_secret(path):
    """Fetch secret from HashiCorp Vault."""
    url = f"{VAULT_ADDR}/v1/{path}"
    response = requests.get(url, headers=HEADERS)
    if response.status_code == 200:
        return response.json()["data"]
    else:
        raise Exception(f"Failed to fetch secret from {path}: {response.text}")

def store_vault_secret(path, secret_data):
    """Store a new secret in HashiCorp Vault."""
    url = f"{VAULT_ADDR}/v1/{path}"
    response = requests.post(url, headers=HEADERS, json={"data": secret_data})
    if response.status_code not in [200, 204]:
        raise Exception(f"Failed to store secret at {path}: {response.text}")

def generate_password(length=16):
    """Generate a random password."""
    chars = string.ascii_letters + string.digits + "!@#$%^&*"
    return ''.join(random.choice(chars) for _ in range(length))

def update_db_password(db_user, new_password, master_credentials):
    """Update PostgreSQL user password."""
    try:
        conn = psycopg2.connect(
            host=DB_HOST,
            database=DB_NAME,
            user=master_credentials['username'],
            password=master_credentials['password'],
            port=DB_PORT
        )
        conn.autocommit = True
        cursor = conn.cursor()
        cursor.execute(f"ALTER USER {db_user} WITH PASSWORD '{new_password}';")
        cursor.close()
        conn.close()
        print(f"Password updated for user {db_user}")
    except Exception as e:
        print(f"Error updating password for {db_user}: {str(e)}")
        raise

def lambda_handler(event, context):
    """Lambda Function Entry Point"""
    try:
        print("Fetching master credentials from HashiCorp Vault...")
        master_credentials = get_vault_secret(MASTER_SECRET_PATH)

        print("Generating a new password for the RDS user...")
        new_password = generate_password()

        print(f"Updating password for user {DB_USER} in PostgreSQL database...")
        update_db_password(DB_USER, new_password, master_credentials)

        print("Storing the new password in HashiCorp Vault...")
        store_vault_secret(ROTATED_SECRET_PATH, {"username": DB_USER, "password": new_password})

        return {
            "statusCode": 200,
            "body": json.dumps(f"Password rotation successful for {DB_USER}")
        }
    except Exception as e:
        print(f"Error during password rotation: {str(e)}")
        return {
            "statusCode": 500,
            "body": json.dumps("Password rotation failed")
        }
How to Deploy
Set Environment Variables in AWS Lambda:

VAULT_ADDR â†’ http://vault.example.com:8200
VAULT_TOKEN â†’ Vault access token (or use AWS Secrets Manager to store this securely)
MASTER_SECRET_PATH â†’ Path in Vault where the master DB credentials are stored (secret/db/master)
ROTATED_SECRET_PATH â†’ Path in Vault where the rotated user credentials should be stored (secret/db/rotated-user)
DB_USER, DB_HOST, DB_NAME, DB_PORT â†’ PostgreSQL details
IAM Role Permissions for Lambda:

Ensure Lambda has permissions to connect to RDS and Vault.
Use AWS PrivateLink if Vault is within a private network.
Store Initial Credentials in Vault:

Master credentials in /secret/db/master:
json
Copy
Edit
{
  "username": "masteruser",
  "password": "masterpassword"
}
Placeholder for rotated user /secret/db/rotated-user:
json
Copy
Edit
{
  "username": "appuser",
  "password": "oldpassword"
}
Schedule Lambda Execution:

Use AWS EventBridge to run this function monthly or weekly.
How It Works
âœ… Fetches the master user password from HashiCorp Vault
âœ… Generates a new password for the PostgreSQL user
âœ… Updates the password in PostgreSQL using ALTER USER
âœ… Stores the new password in Vault for future use

Let me know if you need additional security enhancements, like Vault authentication using IAM instead of a static token! ðŸš€







You said:
unable to import module import psycopg2
ChatGPT said:
The error "unable to import module 'psycopg2'" in AWS Lambda usually occurs because psycopg2 is not included in the default Python environment. AWS Lambda requires a compatible version of psycopg2 to be packaged along with the deployment.

Solution 1: Use psycopg2-binary (Quickest)
Instead of psycopg2, install psycopg2-binary in your Lambda deployment package:

sh
Copy
Edit
pip install psycopg2-binary -t .
Then, zip the files and deploy them to AWS Lambda.

However, psycopg2-binary is not recommended for production because it's a precompiled package that might cause issues in multithreaded environments.

Solution 2: Use a Lambda Layer for psycopg2
Download Precompiled psycopg2 for AWS Lambda

sh
Copy
Edit
mkdir -p python
pip install psycopg2 -t python/
zip -r psycopg2-layer.zip python/
Create an AWS Lambda Layer

Go to AWS Console â†’ Lambda â†’ Layers.
Click Create Layer.
Upload psycopg2-layer.zip.
Select the compatible Python version.
Attach the Layer to Your Lambda Function

In AWS Lambda, go to Configuration â†’ Layers.
Click Add a layer.
Select your custom psycopg2 layer.
Solution 3: Use amazonlinux Docker for Building Compatible Package
If youâ€™re running Lambda on Amazon Linux, use a Docker container to build psycopg2 in an environment that matches Lambda:

sh
Copy
Edit
docker run --rm -v $(pwd):/app -w /app amazonlinux:2 \
    bash -c "yum install -y python3-devel postgresql-devel && pip3 install psycopg2 -t ."
zip -r deployment-package.zip .
Then upload deployment-package.zip to AWS Lambda.

Recommended Approach
If this is for a production environment, use Solution 2 (Lambda Layer). If you just need a quick fix, try Solution 1 (psycopg2-binary).

Would you like help setting up the Lambda Layer or testing the deployment?
