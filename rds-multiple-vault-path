import json
import boto3
import psycopg2
import secrets
import string
import logging
from hvac import Client

# Configure logging
logger = logging.getLogger()
logger.setLevel(logging.INFO)

def get_vault_client(vault_server, target_vault_namespace, vault_role, aws_region):
    session = boto3.Session(region_name=aws_region)
    aws_credentials = session.get_credentials().get_frozen_credentials()
    
    logger.info("Logging into Vault")
    vault_client = Client(url=vault_server, verify=False, namespace=f"aws/{target_vault_namespace}")
    vault_client.auth.aws.iam_login(
        access_key=aws_credentials.access_key,
        secret_key=aws_credentials.secret_key,
        session_token=aws_credentials.token,
        role=vault_role
    )
    return vault_client

def get_master_credentials(vault_client, master_path):
    response = vault_client.secrets.kv.v2.read_secret_version(path=master_path)
    creds = response['data']['data']
    return creds['username'], creds['password']

def generate_new_password(length=16):
    chars = string.ascii_letters + string.digits + string.punctuation
    return ''.join(secrets.choice(chars) for _ in range(length))

def update_db_password(db_host, db_name, master_user, master_password, username, new_password):
    conn = psycopg2.connect(
        host=db_host, database=db_name, user=master_user, password=master_password
    )
    conn.autocommit = True
    cursor = conn.cursor()
    cursor.execute(f"ALTER USER {username} WITH PASSWORD '{new_password}';")
    cursor.close()
    conn.close()

def update_vault_password(vault_client, vault_path, username, new_password):
    vault_client.secrets.kv.v2.create_or_update_secret(
        path=vault_path,
        secret={"username": username, "password": new_password}
    )

def lambda_handler(event, context):
    vault_server = "https://vault.example.com"
    target_vault_namespace = "default"
    vault_role = "vault-role"
    aws_region = "us-east-1"
    master_path = "f_rds/rds_token"
    
    users_to_rotate = {
        "f_rds/f_app_role": "app_read_user",
        "f_rds/f_app_role": "app_readwrite_user",
        "f_rds/pipeline": "pipeline_read_write_user"
    }
    
    db_host = "my-rds-instance.amazonaws.com"
    db_name = "mydatabase"
    
    vault_client = get_vault_client(vault_server, target_vault_namespace, vault_role, aws_region)
    master_user, master_password = get_master_credentials(vault_client, master_path)
    
    for vault_path, username in users_to_rotate.items():
        new_password = generate_new_password()
        
        try:
            update_db_password(db_host, db_name, master_user, master_password, username, new_password)
            update_vault_password(vault_client, vault_path, username, new_password)
            logger.info(f"Successfully rotated password for {username}")
        except Exception as e:
            logger.error(f"Failed to rotate password for {username}: {str(e)}")
            
    return {
        'statusCode': 200,
        'body': json.dumps('Password rotation completed.')
    }
